# -*- python -*-
# ex: set filetype=python:

from buildbot.plugins import *

# This is a sample buildmaster config file. It must be installed as
# 'master.cfg' in your buildmaster's base directory.

# This is the dictionary that the buildmaster pays attention to. We also use
# a shorter alias to save typing.
c = BuildmasterConfig = {}

####### WORKERS

# First we declare that the secrets are stored in a directory of the filesystem
# each file contains one secret identified by the filename
c['secretsProviders'] = [secrets.SecretInAFile(dirname="{{ buildbot_controller_path }}/_secrets/")]

# The 'workers' list defines the set of recognized workers. Each element is
# a Worker object, specifying a unique worker name and password.  The same
# worker name and password must be configured on the worker.
c['workers'] = [worker.Worker("{{ buildbot_worker_name }}", 
                              util.Secret("{{ buildbot_worker_name }}"))]  # read password from secret file

# 'protocols' contains information about protocols which master will use for
# communicating with workers. You must define at least 'port' option that workers
# could connect to your master with this protocol.
# 'port' must match the value configured into the workers (with their
# --master option)
c['protocols'] = {'pb': {'port': 9989}}

####### CHANGESOURCES

# the 'change_source' setting tells the buildmaster how it should find out
# about source code changes.  Here we point to the buildbot version of a python hello-world project.

c['change_source'] = []
c['change_source'].append(changes.GitPoller(
        'https://github.com/opennet-initiative/firmware.git',
        workdir='gitpoller-workdir', branch='main',
        pollInterval=600))

####### SCHEDULERS

# Configure the Schedulers, which decide how to react to incoming changes.  In this
# case, just kick off a 'runtests' build

c['schedulers'] = []
c['schedulers'].append(schedulers.SingleBranchScheduler(
                            name="all",
                            change_filter=util.ChangeFilter(branch='main'),
                            treeStableTimer=None,
                            builderNames=["opennet-builder"]))
c['schedulers'].append(schedulers.ForceScheduler(
                            name="force",
                            builderNames=["opennet-builder"],
                            codebases=[
                                util.CodebaseParameter(
                                    "",
                                    label="Main repository",
                                    # will generate a combo box
                                    branch=util.ChoiceStringParameter(
                                        name="branch",
                                        choices=["main"],
                                        default="main"),
                                    # will generate nothing in the form, but revision, repository,
                                    # and project are needed by buildbot scheduling system so we
                                    # need to pass a value ("")
                                    revision=util.FixedParameter(name="revision", default=""),
                                    repository=util.FixedParameter(name="repository", default=""),
                                    project=util.FixedParameter(name="project", default=""),
                                ),
                            ],
                            # will generate a text input
                            reason=util.StringParameter(name="reason", label="reason:", required=True, size=80),
                            # A completely customized property list.  The name of the
                            # property is the name of the parameter
                            properties=[
                                util.NestedParameter(
                                    name="options", 
                                    label="Build Options",
                                    layout="vertical", 
                                    fields=[
                                        util.BooleanParameter(name="force_make_distclean", label="force a make distclean", default=False),
                                    ]
                                )
                            ]
                            ))

# helper function for checking the parameter in builder
def enforcedMakeDistclean(step):
    options = step.getProperty('options')
    if options and options.get("force_make_distclean") == True:
        return True
    return False

def enforcedMakeArchAll(step):
    build_all_arch = True  # change this to False if you need to have fast builds (only ath79 + mikrotik)
    return build_all_arch

####### BUILDERS

# The 'builders' list defines the Builders, which tell Buildbot how to perform a build:
# what steps, and which workers can execute them.  Note that any particular build will
# only take place on one worker.

factory = util.BuildFactory()
# check out the source
factory.addStep(steps.Git(repourl='https://github.com/opennet-initiative/firmware.git', mode='incremental'))
factory.addStep(steps.ShellCommand(name="distclean", command=["make", "distclean"], description="make distclean", doStepIf=enforcedMakeDistclean))
factory.addStep(steps.ShellCommand(name="autobuilder-clean", command=["make", "autobuilder-clean"], description="make autobuild-clean"))
factory.addStep(steps.ShellCommand(name="init", command=["make", "init"], description="make init"))
# build architecture with following parameters:
#  - use 2 CPUs. This is specific for hoshino at the moment.
#  - set timeout to 1 hour (3600sec) because last build step (make[4] -C target/linux install) needs much time
factory.addStep(steps.ShellCommand(name="ath79", command=["make", "-j2", "ath79"], description="make ath79", timeout=3600))  
factory.addStep(steps.ShellCommand(name="bcm2708", command=["make", "-j2", "bcm2708"], description="make bcm2708", timeout=3600, doStepIf=enforcedMakeArchAll))
factory.addStep(steps.ShellCommand(name="bcm2709", command=["make", "-j2", "bcm2709"], description="make bcm2709", timeout=3600, doStepIf=enforcedMakeArchAll))
factory.addStep(steps.ShellCommand(name="bcm2710", command=["make", "-j2", "bcm2710"], description="make bcm2710", timeout=3600, doStepIf=enforcedMakeArchAll))
factory.addStep(steps.ShellCommand(name="ipq40xx", command=["make", "-j2", "ipq40xx"], description="make ipq40xx", timeout=3600, doStepIf=enforcedMakeArchAll))
factory.addStep(steps.ShellCommand(name="ipq40xx_mikrotik", command=["make", "-j2", "ipq40xx_mikrotik"], description="make ipq40xx_mikrotik", timeout=3600, doStepIf=enforcedMakeArchAll))
factory.addStep(steps.ShellCommand(name="mediatek", command=["make", "-j2", "mediatek"], description="make mediatek", timeout=3600))
factory.addStep(steps.ShellCommand(name="mikrotik", command=["make", "-j2", "mikrotik"], description="make mikrotik", timeout=3600))
factory.addStep(steps.ShellCommand(name="mikrotik24", command=["make", "-j2", "mikrotik24"], description="make mikrotik24", timeout=3600, doStepIf=enforcedMakeArchAll))
factory.addStep(steps.ShellCommand(name="ramips7621", command=["make", "-j2", "ramips7621"], description="make ramips7621", timeout=3600, doStepIf=enforcedMakeArchAll))
factory.addStep(steps.ShellCommand(name="rockchip", command=["make", "-j2", "rockchip"], description="make rockchip", timeout=3600, doStepIf=enforcedMakeArchAll))
factory.addStep(steps.ShellCommand(name="sunxi", command=["make", "-j2", "sunxi"], description="make sunxi", timeout=3600, doStepIf=enforcedMakeArchAll))
factory.addStep(steps.ShellCommand(name="x86", command=["make", "-j2", "x86"], description="make x86", timeout=3600, doStepIf=enforcedMakeArchAll))
factory.addStep(steps.ShellCommand(name="x86_64", command=["make", "-j2", "x86_64"], description="make x86_64", timeout=3600, doStepIf=enforcedMakeArchAll))
factory.addStep(steps.ShellCommand(name="doc", command=["make", "-j2", "doc"], description="make doc", timeout=3600))
factory.addStep(steps.ShellCommand(name="export", command=["opennet/tools/buildbot-worker/export-build-buildbot.sh"], description="export-build-buildot.sh"))
factory.addStep(steps.ShellCommand(name="unpatch", command=["make", "unpatch"]))

c['builders'] = []
c['builders'].append(
    util.BuilderConfig(name="opennet-builder",
      workernames=["{{ buildbot_worker_name }}"],
      factory=factory))

####### BUILDBOT SERVICES

# 'services' is a list of BuildbotService items like reporter targets. The
# status of each build will be pushed to these targets. buildbot/reporters/*.py
# has a variety to choose from, like IRC bots.

c['services'] = []

####### PROJECT IDENTITY

# the 'title' string will appear at the top of this buildbot installation's
# home pages (linked to the 'titleURL').

c['title'] = "Opennet DEV"
c['titleURL'] = "https://www.opennet-initiative.de"

# the 'buildbotURL' string should point to the location where the buildbot's
# internal web server is visible. This typically uses the port number set in
# the 'www' entry below, but with an externally-visible host name which the
# buildbot cannot figure out without some help.

c['buildbotURL'] = "https://dev.opennet-initiative.de/"

# restrict access to localhost
c['www'] = dict(port="tcp:8010:interface=127.0.0.1",
                plugins=dict(waterfall_view={}, console_view={}, grid_view={}))

# The default configuration allows everyone to perform any task, like creating or 
# stopping builds via the web interface. To restrict this to a user:
c['www']['authz'] = util.Authz(
        allowRules = [
            util.AnyControlEndpointMatcher(role="admins"),
        ],
        roleMatchers = [
            util.RolesFromUsername(roles=['admins'], usernames=['admin'])
        ]
)
c['www']['auth'] = util.UserPasswordAuth([('admin','opennet')])  # obviously not secure! Only for testing.

####### DB URL

c['db'] = {
    # This specifies what database buildbot uses to store its state.
    # It's easy to start with sqlite, but it's recommended to switch to a dedicated
    # database, such as PostgreSQL or MySQL, for use in production environments.
    # http://docs.buildbot.net/current/manual/configuration/global.html#database-specification
    'db_url' : "sqlite:///state.sqlite",
}
